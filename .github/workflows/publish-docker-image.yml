name: Publish Docker Image

on:
  workflow_dispatch:
    inputs:
      imageTag:
        description: 'docker image tag'
        type: string
        required: true
      registry:
        description: 'switch registry'
        type: choice
        required: true
        default: ccr.ccs.tencentyun.com/opensrcdevelop/auth-server
        options:
          - ccr.ccs.tencentyun.com/opensrcdevelop/auth-server
          - registry.cn-hangzhou.aliyuncs.com/opensrcdevelop/auth-server

env:
  CCR_IMAGE_URL: ccr.ccs.tencentyun.com/opensrcdevelop/auth-server

jobs:
  build-jar:
    name: Build Jar
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Build With Gradle Wrapper
        run: |
          chmod +x ./gradlew
          ./gradlew -x test build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Auth-Server Artifacts
          path: |
            ./auth-server/build/libs
            ./auth-server/Dockerfile

  build-push-docker-image:
    name: Build and push Docker image
    needs: build-jar
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: Auth-Server Artifacts

      - name: Build Docker image
        run: |
          docker build -t ${{ inputs.registry }}:${{ inputs.imageTag }} .

      - name: Login Registry
        run: |
          if [ ${{ inputs.registry }} == 'ccr.ccs.tencentyun.com/opensrcdevelop/auth-server' ]; then
            echo "Login CCR"
            docker login -u ${{ secrets.CCR_USERNAME }} -p '${{ secrets.CCR_PASSWORD }}' ${{ inputs.registry }}
          elif [ ${{ inputs.registry }} == 'registry.cn-hangzhou.aliyuncs.com/opensrcdevelop/auth-server' ]; then
            echo "Login ACR"
            docker login -u ${{ secrets.ACR_USERNAME }} -p '${{ secrets.ACR_PASSWORD }}' ${{ inputs.registry }}
          fi

      - name: Push Docker image
        run: |
          docker push ${{ inputs.registry }}:${{ inputs.imageTag }}